cmake_minimum_required (VERSION 3.0)

set(ICONS_DIR "${${PROJECT_NAME}_SOURCE_DIR}/resources/icons")

if (LINUX)
	set (CMAKE_PREFIX_PATH "/usr")
	include_directories(BEFORE "/usr/include")
endif()

if (WIN32)
	if (CMAKE_COMPILER_IS_GNUCXX)
		set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mwindows")
	endif()
endif()


set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

## sources
file(GLOB UIS ${CMAKE_CURRENT_SOURCE_DIR}/../UIs/*.ui)
set(CMAKE_AUTOUIC_SEARCH_PATHS ${CMAKE_CURRENT_SOURCE_DIR}/../UIs)

list (APPEND SOURCES
	neutrino.cc
	nGenericPan.cc panThread.cc nPluginLoader.cc nPlug.cc nPanPlug.cc
	nApp.cc main.cc
	graphics/neutrinoPalettes.cc graphics/nView.cc graphics/nMouse.cc
	graphics/nLine.cc graphics/nTics.cc graphics/nPoint.cc
	graphics/nObject.cc graphics/nRect.h graphics/nEllipse.h
	graphics/spline.cc graphics/qcustomplot.cpp graphics/nCustomPlots.cpp
	pans/nFocalSpot.cc pans/nPhysProperties.cc pans/nContours.cc
	pans/nInterpolatePath.cc pans/nOpenRAW.cc pans/nSpectralAnalysis.cc
	pans/colorbar/nHistogram.cc pans/colorbar/nColorBar.cc
	pans/nMouseInfo.cc pans/nBoxLineout.cc pans/nPreferences.cc
	pans/nAffine.cc pans/nMonitor.cc pans/nRotate.cc pans/nWavelet.cc pans/nRegionPath.cc
	pans/nIntegralInversion.cc pans/nLineoutBoth.cc pans/winlist/nTreeWidget.cc
	pans/winlist/nWinList.cc pans/nCutoffMask.cc pans/nCompareLines.cc
	pans/nShortcuts.cc pans/nOperator.cc pans/nLineout.cc pans/nZoomWin.cc
	pans/nCamera.cc
	)

include(FindNeutrinoDeps)

add_definitions(-D__VER_LATEST="${${PROJECT_NAME}_VERSION_GIT_SHA}")

if (APPLE AND NOT DEFINED Qt5_DIR)
	set(Qt5_DIR "/usr/local/opt/qt5/lib/cmake/Qt5")
	MESSAGE(STATUS "Qt5_DIR set to ${Qt5_DIR}")
endif()

set(MODULES Core Gui Sql Widgets Svg PrintSupport UiTools Multimedia MultimediaWidgets OpenGL)

find_package(Qt5 COMPONENTS ${MODULES} REQUIRED)

add_definitions(${QT_DEFINITIONS})

set(QRCDIR ${CMAKE_CURRENT_BINARY_DIR}/qrc)
file(MAKE_DIRECTORY ${QRCDIR})

# write automatically the qrc file for icons
set(ICONSDIR ${CMAKE_CURRENT_SOURCE_DIR}/../resources/icons)
file(GLOB_RECURSE ICONS ${ICONSDIR}/*.png)
set(ICONS_QRC ${QRCDIR}/icons.qrc)
file(WRITE ${ICONS_QRC} "<!-- \n DO NOT EDIT\n This has been automagically de-generated by\n ${CMAKE_CURRENT_LIST_FILE} \n DO NOT EDIT\n -->\n")
file(APPEND ${ICONS_QRC} "<RCC>\n    <qresource prefix=\"/icons/\">\n")
foreach(my_file ${ICONS})
	file(RELATIVE_PATH my_file_relative_path ${QRCDIR} ${my_file})
	GET_FILENAME_COMPONENT(my_file_basename ${my_file} NAME)
	file(APPEND ${ICONS_QRC} "        <file alias=\"${my_file_basename}\">${my_file_relative_path}</file>\n")
endforeach()
file(APPEND ${ICONS_QRC} "    </qresource>\n</RCC>")
list(LENGTH ICONS LIST_LENGTH)
message(STATUS "${LIST_LENGTH} icon files: ${ICONS_QRC}")


# write automatically the qrc file for html
set(HTMLDIR ${CMAKE_CURRENT_SOURCE_DIR}/../resources/html)
file(GLOB HTMLS ${HTMLDIR}/*.html)
set(HTML_QRC ${QRCDIR}/html.qrc)
file(WRITE ${HTML_QRC} "<RCC>\n    <qresource prefix=\"/html/\">\n")
foreach(my_file ${HTMLS})
	file(RELATIVE_PATH my_file_relative_path ${QRCDIR} ${my_file})
	GET_FILENAME_COMPONENT(my_file_basename ${my_file} NAME)
	file(APPEND ${HTML_QRC} "        <file alias=\"${my_file_basename}\">${my_file_relative_path}</file>\n")
endforeach()
file(APPEND ${HTML_QRC} "    </qresource>\n</RCC>")
list(LENGTH HTMLS LIST_LENGTH)
message(STATUS "${LIST_LENGTH} html files: ${HTML_QRC}")

file(GLOB_RECURSE HTMLLICENSES ${HTMLDIR}/licenses/*)
set(LICENSES_QRC ${QRCDIR}/licenses.qrc)
file(WRITE ${LICENSES_QRC} "<RCC>\n    <qresource prefix=\"/licenses/\">\n")
foreach(my_file ${HTMLLICENSES})
	file(RELATIVE_PATH my_file_relative_path ${QRCDIR} ${my_file})
	GET_FILENAME_COMPONENT(my_file_basename ${my_file} NAME)
	file(APPEND ${LICENSES_QRC} "        <file alias=\"${my_file_basename}\">${my_file_relative_path}</file>\n")
endforeach()
file(APPEND ${LICENSES_QRC} "    </qresource>\n</RCC>")
list(LENGTH HTMLLICENSES LIST_LENGTH)
message(STATUS "${LIST_LENGTH} license files: ${LICENSES_QRC}")

# sub-structure (wrong: we should probably replicate CMakeLists.txt in every subfolder)
include_directories(graphics doc pans pans/colorbar pans/winlist)

#translate ui

if (Qt5LinguistTools_FOUND)
	SET(LANGUAGES fr_FR it_IT ko_KP)

	SET(LANGUAGE_TS_FILES)
	FOREACH(LANGUAGE ${LANGUAGES})
	SET(TS_FILE "${CMAKE_CURRENT_SOURCE_DIR}/../resources/translations/neutrino_${LANGUAGE}.ts")
	message(STATUS "Language : ${TS_FILE}")
	SET(LANGUAGE_TS_FILES ${LANGUAGE_TS_FILES} ${TS_FILE})

	if(EXISTS ${TS_FILE})
		qt5_add_translation(qm_files ${TS_FILE})
	else (EXISTS ${TS_FILE})
		qt5_create_translation(qm_files ${SOURCES} ${UIS} ${TS_FILE})
	endif(EXISTS ${TS_FILE})

	ENDFOREACH(LANGUAGE ${LANGUAGES})

	IF(LANGUAGE_TS_FILES)

	set(TRANSL_QRC ${QRCDIR}/translations.qrc)
	file(WRITE ${TRANSL_QRC} "<RCC>\n    <qresource prefix=\"/translations/\">\n")
	foreach(my_file ${qm_files})
		file(RELATIVE_PATH my_file_relative_path ${QRCDIR} ${my_file})
		GET_FILENAME_COMPONENT(my_file_basename ${my_file} NAME)
		file(APPEND ${TRANSL_QRC} "        <file alias=\"${my_file_basename}\">${my_file_relative_path}</file>\n")
	endforeach()
	file(APPEND ${TRANSL_QRC} "    </qresource>\n</RCC>")
	list(LENGTH LANGUAGE_TS_FILES LIST_LENGTH)
	message(STATUS "${LIST_LENGTH} translation files: ${TRANSL_QRC}")

ENDIF(LANGUAGE_TS_FILES)


endif(Qt5LinguistTools_FOUND)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_BINARY_DIR}/nPhysImage")

set(LIBS ${LIBS} "nPhysImageF")

include_directories(${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR} ${QRCDIR} ${ICONSDIR})

set(PROJECT_DOMAIN_FIRST "neutrino")
set(PROJECT_DOMAIN_SECOND "com")
set(PROJECT_VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}")
set(PROJECT_VENDOR "neutrino inc.")
string(TIMESTAMP CURRENT_YEAR "%Y")
set(PROJECT_COPYRIGHT_YEAR "2011-${CURRENT_YEAR}")



if(APPLE)
	set(MACOSX_BUNDLE_EXECUTABLE_NAME "${PROJECT_NAME}")
	set(MACOSX_BUNDLE_INFO_STRING "${PROJECT_NAME} ${${PROJECT_NAME}_VERSION}")
	set(MACOSX_BUNDLE_GUI_IDENTIFIER "${PROJECT_DOMAIN_SECOND}.${PROJECT_DOMAIN_FIRST}")

	set(MACOSX_BUNDLE_BUNDLE_VERSION "${${PROJECT_NAME}_VERSION}")
	set(MACOSX_BUNDLE_SHORT_VERSION_STRING "${${PROJECT_NAME}_VERSION}")
	set(MACOSX_BUNDLE_LONG_VERSION_STRING "${${PROJECT_NAME}_VERSION_STRING_FULL}")
	set(MACOSX_BUNDLE_COPYRIGHT "Copyright ${PROJECT_COPYRIGHT_YEAR} Tommaso Vinci, Alessandro Flacco. GNU General Public License v2.0")

	set(MACOSX_BUNDLE_ICON_FILE icon.icns)
	set(${PROJECT_NAME}_ICON ${CMAKE_CURRENT_SOURCE_DIR}/../resources/icons/icon.icns)
	set(${PROJECT_NAME}_ICONTYPE ${CMAKE_CURRENT_SOURCE_DIR}/../resources/macPackage/filetype.icns)

	set_source_files_properties(${${PROJECT_NAME}_ICON} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")
	set_source_files_properties(${${PROJECT_NAME}_ICONTYPE} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")

	add_executable(${PROJECT_NAME} MACOSX_BUNDLE ${${PROJECT_NAME}_ICON} ${${PROJECT_NAME}_ICONTYPE} ${SOURCES} ${UIS} ${ICONS_QRC} ${HTML_QRC} ${LICENSES_QRC} ${TRANSL_QRC} ${ICONS_QRC} ${HTML_QRC} ${qm_files})
	target_link_libraries(Neutrino "-framework IOKit -framework CoreFoundation")

	configure_file("${CMAKE_CURRENT_SOURCE_DIR}/../resources/macPackage/neutrino.plist.cmake" ${CMAKE_CURRENT_BINARY_DIR}/Info.plist)
	set_target_properties(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_BINARY_DIR}/Info.plist)

    set(CMAKE_INSTALL_PREFIX "${CMAKE_CURRENT_BINARY_DIR}/..")
    set (EXECUTABLE_OUTPUT_PATH ".")

    set (CMAKE_INSTALL_RPATH "@executable_path/../Frameworks")
    set_target_properties(${PROJECT_NAME} PROPERTIES INSTALL_RPATH ${CMAKE_INSTALL_RPATH} INSTALL_RPATH_USE_LINK_PATH TRUE)

    install (TARGETS ${PROJECT_NAME} BUNDLE DESTINATION "${CMAKE_INSTALL_PREFIX}" COMPONENT binary)
endif()

if(WIN32)
	set (RC_WIN "${${PROJECT_NAME}_SOURCE_DIR}/resources/neutrino.rc")
	list (APPEND CMAKE_EXE_LINKER_FLAGS "-Wl,--export-all-symbols")
	if (CMAKE_BUILD_TYPE STREQUAL "Debug")
		add_executable(${PROJECT_NAME} ${SOURCES} ${UIS} ${ICONS_QRC} ${HTML_QRC} ${LICENSES_QRC} ${TRANSL_QRC} ${RC_WIN} )
	else()
		add_executable(${PROJECT_NAME} WIN32  ${SOURCES} ${UIS} ${ICONS_QRC} ${HTML_QRC} ${LICENSES_QRC} ${TRANSL_QRC} ${RC_WIN} )
	endif()

	set_property(TARGET ${PROJECT_NAME} PROPERTY ENABLE_EXPORTS ON)
	set_property(TARGET ${PROJECT_NAME} PROPERTY WINDOWS_EXPORT_ALL_SYMBOLS ON)
    install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION bin COMPONENT binary)

endif()

if(LINUX)
	add_executable(${PROJECT_NAME} ${SOURCES} ${UIS} ${ICONS_QRC} ${HTML_QRC} ${LICENSES_QRC} ${TRANSL_QRC} ${qm_files})
    install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION bin COMPONENT binary)
endif()


SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

foreach(MODULE ${MODULES})
    set(MODULES_TWEAK "${MODULES_TWEAK};Qt5::${MODULE}")
endforeach()

target_link_libraries(${PROJECT_NAME} ${LIBS} ${MODULES_TWEAK})

message(STATUS "Building ${PROJECT_NAME} in ${CMAKE_BUILD_TYPE} mode")

